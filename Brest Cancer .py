# -*- coding: utf-8 -*-
"""Assignment  Data Preparation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m4c5_3IrN9RJ3DVDN8i1XluwFlxGsf3y
"""

from pandas import read_csv, get_dummies,DataFrame,Series
data=read_csv('/content/Breast_Cancer (1).csv')
data
data.head
print(data.shape)
print(data.info())

data['Status']

data['Status'] = data['Status'].map({'Alive':1, 'Dead':0})
data['Progesterone Status'] = data['Progesterone Status'].map({'Positive':1, 'Negative':0})
data['A Stage'] = data['A Stage'].map({'Regional':1, 'Distant':0})
data['Estrogen Status'] = data['Estrogen Status'].map({'Positive':1, 'Negative':0})
categorical_features = ['Race', 'Marital Status', 'T Stage ', 'N Stage', '6th Stage', 'differentiate', 'Grade']
data2 = get_dummies(data, columns = categorical_features, drop_first=True)

data2

print(data2.info())

data2=get_dummies(data, columns = ['Race', 'Marital Status', 'T Stage ', 'N Stage', '6th Stage', 'differentiate', 'Grade'])# encoding using one hot encoding method
data2.info()

data2.to_csv('encoded_Data.csv')

X = data2.drop('Status', axis=1) # Features
Y = data2['Status'] # Labels
# print(type(X))
# print(type(Y))
print(X.shape)
print(Y.shape)
X
Y

#Y.value_counts()

from sklearn.preprocessing import StandardScaler
X_scaled = StandardScaler().fit_transform(X)
#print (X_scaled)

print (DataFrame(X_scaled))

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split( X_scaled, Y, test_size = 0.20, random_state = 100)
print(X_train.shape)
print(X_test.shape)
print(Y_train.shape)
print(Y_test.shape)

from imblearn.over_sampling import SMOTE
print("Number of observations in each class before oversampling (training data): \n", Series(Y_train).value_counts())
# smote = SMOTE(random_state = 101)
# X_train,Y_train = smote.fit_resample(X_train,Y_train)
X_train,Y_train = SMOTE(random_state = 101).fit_resample(X_train,Y_train)
print("Number of observations in each class after oversampling (training data): \n", Series(Y_train).value_counts())